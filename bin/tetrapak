#!/usr/bin/env escript
% vim: filetype=erlang

main([]) -> 
  ensure_code_path(),
  usage();
main(Args) ->
  ensure_code_path(),
  ArgDesc    = [{arg, template}],
  {ok, Cwd}  = file:get_cwd(),
  OptionDesc = [{option_arg, publish,    ["--publish", "-p"],    false},
                {option_arg, outdir,     ["--outdir", "-o"],     Cwd},
                {flag,       help,       ["--help", "-h"],       false},
                {flag,       inc_vsn,    ["--inc-vsn"],          false},
                {flag,       dont_build, ["--dont-build", "-B"], false}],
  case (catch tep_util:parse_cmdline(Args, OptionDesc, ArgDesc)) of
    {ok, Options} ->
      case proplists:get_bool(help, Options) of
        true -> usage();
        false -> run(proplists:get_value(template, Options), Options)
      end;
    _ -> 
      usage()
  end.

run(Template, Options) ->
  case tetrapak:is_template(Template) of
    true ->
      {ok, Cwd} = file:get_cwd(),
      tetrapak:run(Cwd, Template, Options);
    false ->
      io:format("error: no such template: ~s~n", [Template])
  end.

usage() ->
  io:format(
"Usage: tetrapak [ options ] <template>

Recognized Options:
   -p, --publish <repo_name>   attempt to publish resulting package to
                               the given named repository
   --inc-vsn                   increase version in app file
   -o, --outdir <dir>          place output package in <dir>
   -B, --dont-build            skip build
   -h, --help                  print this help~n~n"),
  tep_config:list_repos().

ensure_code_path() ->
  RealPath = case file:read_link(?FILE) of
    {ok, R} -> R;
    {error, einval} -> ?FILE;
    {error, enotsup} -> ?FILE
  end,
  Root = filename:absname(filename:dirname(filename:dirname(RealPath))),
  code:add_patha(filename:join(Root, "ebin")).
